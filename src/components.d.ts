/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { InterfaceMyButton } from "./components/my-button/my-button.custom.d";
export { InterfaceMyButton } from "./components/my-button/my-button.custom.d";
export namespace Components {
    interface MyBoilerplate {
        /**
          * Create a meaningful description for the properties/attributes. This will be automatically rendered to the documentation.
         */
        "foo": string;
    }
    interface MyButton {
        /**
          * Create a meaningful description for the properties/attributes. This will be automatically rendered to the documentation.
         */
        "firstName": string;
        /**
          * Create a meaningful description for the method. This will be automatically rendered to the documentation.
         */
        "sampleMethod": () => Promise<void>;
        "variant"?: InterfaceMyButton['variant'];
    }
}
export interface MyButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLMyButtonElement;
}
declare global {
    interface HTMLMyBoilerplateElement extends Components.MyBoilerplate, HTMLStencilElement {
    }
    var HTMLMyBoilerplateElement: {
        prototype: HTMLMyBoilerplateElement;
        new (): HTMLMyBoilerplateElement;
    };
    interface HTMLMyButtonElementEventMap {
        "my-button_button-clicked": void;
    }
    interface HTMLMyButtonElement extends Components.MyButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLMyButtonElementEventMap>(type: K, listener: (this: HTMLMyButtonElement, ev: MyButtonCustomEvent<HTMLMyButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLMyButtonElement: {
        prototype: HTMLMyButtonElement;
        new (): HTMLMyButtonElement;
    };
    interface HTMLElementTagNameMap {
        "my-boilerplate": HTMLMyBoilerplateElement;
        "my-button": HTMLMyButtonElement;
    }
}
declare namespace LocalJSX {
    interface MyBoilerplate {
        /**
          * Create a meaningful description for the properties/attributes. This will be automatically rendered to the documentation.
         */
        "foo": string;
    }
    interface MyButton {
        /**
          * Create a meaningful description for the properties/attributes. This will be automatically rendered to the documentation.
         */
        "firstName": string;
        /**
          * Create a meaningful description for the event. This will be automatically rendered to the documentation.
         */
        "onMy-button_button-clicked"?: (event: MyButtonCustomEvent<void>) => void;
        "variant"?: InterfaceMyButton['variant'];
    }
    interface IntrinsicElements {
        "my-boilerplate": MyBoilerplate;
        "my-button": MyButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-boilerplate": LocalJSX.MyBoilerplate & JSXBase.HTMLAttributes<HTMLMyBoilerplateElement>;
            "my-button": LocalJSX.MyButton & JSXBase.HTMLAttributes<HTMLMyButtonElement>;
        }
    }
}
